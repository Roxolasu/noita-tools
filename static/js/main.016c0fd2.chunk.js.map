{"version":3,"sources":["workers/seedCalculator.worker.ts","services/Calculator2.ts","components/RecipesForSeed/SeedForm.tsx","components/RecipesForSeed/MaterialList.tsx","components/RecipesForSeed/RecipesForSeed.tsx","components/ListSelect.tsx","components/SeedFromRecipes/SeedFromRecipes.tsx","components/Donate.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","intMul","a","b","al","bl","intDiv","x","y","Error","num","Math","floor","ceil","toInt","i","max","min","toUInt","NollaPrng","seed","SEED_BASE","this","Next","BETA_SEED","MaterialPicker","prng","worldSeed","PRNG","Materials","PickMaterials","LIQUIDS","ALCHEMY","ShuffleList","source","count","counter","failed","rand","length","picked","includes","push","LC","AP","SeedForm","props","onSubmit","React","useState","setSeed","Form","className","e","preventDefault","FormGroup","row","Label","for","Col","Input","id","type","value","onChange","target","Button","color","MaterialList","ListGroup","map","l","ListGroupItem","key","RecipesForSeed","data","setData","Container","Row","xs","sm","PickForSeed","parseInt","Option","name","selected","handleClick","onClick","ListSelect","items","item","newSelected","Set","has","delete","add","onUpdate","handleSelectedChanged","RecipeIngredientsPicker","onSelectAll","onDeselectAll","enoughLiquids","enoughAlchemy","ColProps","ml","ButtonGroup","filter","useSeedSolver","createComlink","SeedSolverWorker","SeedFromRecipes","apIngredientsSelected","setApIngredientsSelected","lcIngredientsSelected","setLcIngredientsSelected","SeedSolver","solverInfo","setSolverInfo","getSeedSolver","async","newSeedSolver","proxy","useEffect","setInterval","solver","getInfo","info","update","apIngredients","Array","from","lcIngredients","work","newSeed","isNaN","currentSeed","handleSelectAll","set","newSet","materials","handleDeselectAll","hasEnoughLiquids","hasEnoughAlchemy","hasEnoughAll","disabled","running","start","startCalculation","stop","stopCalculation","Spinner","foundSeed","Donate","action","method","src","title","alt","width","height","App","Jumbotron","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.016c0fd2.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"9ad6edc2fccd6d7acce4.worker.js\");\n};","// Taken from Bridge.NET:\n// https://github.com/bridgedotnet/Bridge/blob/8b1a4a0dee448319ac7bb0879d0019a26285e100/Bridge/Resources/Integer.js#L834\nconst intMul = (a: number, b: number) => {\n\tvar ah = (a >>> 16) & 0xffff,\n\t\tal = a & 0xffff,\n\t\tbh = (b >>> 16) & 0xffff,\n\t\tbl = b & 0xffff;\n\n\treturn (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\n};\n\n// https://github.com/bridgedotnet/Bridge/blob/8b1a4a0dee448319ac7bb0879d0019a26285e100/Bridge/Resources/Integer.js#L720-L738\nconst intTrunc = (num: number): number => {\n\treturn num > 0 ? Math.floor(num) : Math.ceil(num);\n};\nconst intDiv = (x: number, y: number): number => {\n\tif (y === 0) {\n\t\tthrow new Error('Dividing by Zero');\n\t}\n\n\treturn intTrunc(x / y);\n};\n\nconst toInt = (i: number) =>\n\tMath.max(2_147_483_648 * -1, Math.min(Math.floor(i), 2_147_483_647)) | 0;\nconst toUInt = (i: number) =>\n\tMath.max(0, Math.min(Math.floor(i), 4_294_967_295)) >>> 0;\n\nexport class NollaPrng {\n\tpublic static BETA_SEED: boolean = false;\n\tpublic SEED_BASE = 23456789 + 1 + 11 * 11;\n\tpublic seed: number; //double\n\n\tconstructor(seed: number /* int, double */) {\n\t\t// this.seed = seed;\n\t\tthis.seed = toUInt(seed);\n\t\tthis.Next();\n\t}\n\n\tpublic Next(): number {\n\t\t// this.seed =\n\t\t// toInt(this.seed) * 16807 + toInt(this.seed) / 127773 * -2_147_483_647;\n\t\tthis.seed =\n\t\t\t(intMul(toInt(this.seed), 16807) +\n\t\t\t\tintMul(intDiv(toInt(this.seed), 127773) | 0, -2147483647)) |\n\t\t\t0;\n\t\t// this.seed = Math.min(\n\t\t// \ttoInt(this.seed) * 16807 + toInt(this.seed) / 127773,\n\t\t// \t2_147_483_646\n\t\t// );\n\t\tif (this.seed < 0) {\n\t\t\tthis.seed += 2_147_483_647 | 0;\n\t\t}\n\t\treturn this.seed / 2_147_483_647;\n\t}\n}\n\nexport class MaterialPicker {\n\tstatic LIQUIDS = [\n\t\t'water',\n\t\t'water_ice',\n\t\t'water_swamp',\n\t\t'oil',\n\t\t'alcohol',\n\t\t'swamp',\n\t\t'mud',\n\t\t'blood',\n\t\t'blood_fungi',\n\t\t'blood_worm',\n\t\t'radioactive_liquid', // aka \"toxic sludge\"\n\t\t'cement',\n\t\t'acid',\n\t\t'lava',\n\t\t'urine',\n\t\t'poison',\n\t\t'magic_liquid_teleportation',\n\t\t'magic_liquid_polymorph',\n\t\t'magic_liquid_random_polymorph',\n\t\t'magic_liquid_berserk',\n\t\t'magic_liquid_charm',\n\t\t'magic_liquid_invisibility'\n\t];\n\n\tstatic ALCHEMY = [\n\t\t'sand',\n\t\t'bone',\n\t\t'soil',\n\t\t'honey',\n\t\t'slime',\n\t\t'snow',\n\t\t'rotten_meat',\n\t\t'wax',\n\t\t'gold',\n\t\t'silver',\n\t\t'copper',\n\t\t'brass',\n\t\t'diamond',\n\t\t'coal',\n\t\t'gunpowder',\n\t\t'gunpowder_explosive',\n\t\t'grass',\n\t\t'fungi'\n\t];\n\n\tPRNG: NollaPrng;\n\tMaterials: string[] = [];\n\n\tconstructor(prng: NollaPrng, worldSeed: number /* uint */) {\n\t\tthis.PRNG = prng;\n\t\tthis.PickMaterials(MaterialPicker.LIQUIDS, 3);\n\t\tthis.PickMaterials(MaterialPicker.ALCHEMY, 1);\n\t\tthis.ShuffleList(worldSeed);\n\t\tthis.PRNG.Next();\n\t\tthis.PRNG.Next();\n\t}\n\n\tpublic PickMaterials(source: string[], count: number /* int */): void {\n\t\tlet counter = 0; // int\n\t\tlet failed = 0; // int\n\t\twhile (counter < count && failed < 99999) {\n\t\t\tconst rand = this.PRNG.Next() * source.length;\n\t\t\tconst i = toInt(rand);\n\t\t\tvar picked = source[i];\n\t\t\tif (!this.Materials.includes(picked)) {\n\t\t\t\tthis.Materials.push(picked);\n\t\t\t\tcounter++;\n\t\t\t} else {\n\t\t\t\tfailed++;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic ShuffleList(worldSeed: number /* uint */): void {\n\t\tvar prng = new NollaPrng((worldSeed >> 1) + 12534);\n\t\t// Toxic sludge, blood, and soil for first\n\t\tfor (let i = this.Materials.length - 1; i >= 0; i--) {\n\t\t\tlet rand = toInt(prng.Next() * (i + 1));\n\t\t\t[this.Materials[i], this.Materials[rand]] = [\n\t\t\t\tthis.Materials[rand],\n\t\t\t\tthis.Materials[i]\n\t\t\t];\n\t\t}\n\t}\n\n\tpublic static PickForSeed(worldSeed: number /* uint */) {\n\t\tvar prng = new NollaPrng(worldSeed * 0.17127 + 1323.5903);\n\t\t// Preheat random!\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tprng.Next();\n\t\t}\n\n\t\tconst LC = new MaterialPicker(prng, worldSeed);\n\t\tconst AP = new MaterialPicker(prng, worldSeed);\n\n\t\treturn {\n\t\t\tseed: worldSeed,\n\t\t\tLC: [LC.Materials[0], LC.Materials[1], LC.Materials[2]],\n\t\t\tAP: [AP.Materials[0], AP.Materials[1], AP.Materials[2]]\n\t\t};\n\t}\n}\n","import React from 'react';\nimport { Button, Input, Label, Form, FormGroup, Col } from 'reactstrap';\n\ninterface ISeedFormProps {\n\tonSubmit(seed: string): void;\n}\n\nconst SeedForm = (props: ISeedFormProps) => {\n\tconst { onSubmit } = props;\n\tconst [seed, setSeed] = React.useState('');\n\n\tconst handleNameChange = (e: any) => {\n\t\tsetSeed(e.target.value);\n\t};\n\n\tconst handleSubmit = (e: any) => {\n\t\te.preventDefault();\n\t\tonSubmit(seed);\n\t\tsetSeed('');\n\t};\n\n\treturn (\n\t\t<Form className=\"seedForm\" onSubmit={handleSubmit}>\n\t\t\t<FormGroup className=\"formGroup\" row>\n\t\t\t\t<Label className=\"label\" for=\"seedForm.seed\">\n\t\t\t\t\tSeed\n\t\t\t\t</Label>\n\t\t\t\t<Col>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tid=\"seedForm.seed\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tvalue={seed}\n\t\t\t\t\t\tonChange={handleNameChange}\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</FormGroup>\n\t\t\t<Button className=\"submitButton\" type=\"submit\" color=\"primary\">\n\t\t\t\tSubmit\n\t\t\t</Button>\n\t\t</Form>\n\t);\n};\n\nexport default SeedForm;\n","import React from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\n\ninterface IMaterialListProps {\n\tLC: string[];\n\tAP: string[];\n}\n\nconst MaterialList = (props: IMaterialListProps) => {\n\tconst { LC, AP } = props;\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\tLively Concoction:\n\t\t\t\t<ListGroup>\n\t\t\t\t\t{LC.map(l => <ListGroupItem key={l}>{l}</ListGroupItem>)}\n\t\t\t\t</ListGroup>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\tAlchemic Precursor:\n\t\t\t\t<ListGroup>\n\t\t\t\t\t{AP.map(l => <ListGroupItem key={l}>{l}</ListGroupItem>)}\n\t\t\t\t</ListGroup>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MaterialList;\n","import React from 'react';\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\n\nimport { MaterialPicker } from '../../services/Calculator2';\n\nimport SeedForm from './SeedForm';\nimport MaterialList from './MaterialList';\n\nconst RecipesForSeed = () => {\n\tconst [data, setData] = React.useState();\n\n\treturn (\n\t\t<Container className=\"container shadow-sm mb-5\">\n\t\t\t<h4>LC and AP ingredients for a seed</h4>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12} sm={6}>\n\t\t\t\t\t<SeedForm\n\t\t\t\t\t\tonSubmit={seed =>\n\t\t\t\t\t\t\tsetData(MaterialPicker.PickForSeed(parseInt(seed, 10)))\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12} sm={6}>\n\t\t\t\t\t{data && `Seed: ${data.seed}`}\n\t\t\t\t\t{data && <MaterialList LC={data.LC} AP={data.AP} />}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nexport default RecipesForSeed;\n","import React from 'react';\nimport {\n\tJumbotron,\n\tContainer,\n\tRow,\n\tCol,\n\tListGroupItem,\n\tListGroup\n} from 'reactstrap';\n\ninterface IOptionProps {\n\tname: string;\n\tselected: boolean;\n\n\thandleClick: () => void;\n}\nconst Option = (props: IOptionProps) => {\n\tconst { name, selected, handleClick } = props;\n\treturn (\n\t\t<ListGroupItem\n\t\t\t{...(selected ? { color: 'success' } : {})}\n\t\t\tonClick={handleClick}\n\t\t>\n\t\t\t{name}\n\t\t</ListGroupItem>\n\t);\n};\n\ninterface IListSelectProps {\n\tselected: Set<string>;\n\titems: string[];\n\tonUpdate: (selected: Set<string>) => void;\n}\n\nconst ListSelect = (props: IListSelectProps) => {\n\tconst { selected, items } = props;\n\tconst handleSelectedChanged = (selected: Set<string>) => {\n\t\tif (props.onUpdate) {\n\t\t\tprops.onUpdate(selected);\n\t\t}\n\t};\n\tconst handleClick = (item: string) => {\n\t\tconst newSelected = new Set(selected);\n\t\tif (newSelected.has(item)) {\n\t\t\tnewSelected.delete(item);\n\t\t} else {\n\t\t\tnewSelected.add(item);\n\t\t}\n\t\thandleSelectedChanged(newSelected);\n\t};\n\treturn (\n\t\t<ListGroup>\n\t\t\t{items.map(item => (\n\t\t\t\t<Option\n\t\t\t\t\tkey={item}\n\t\t\t\t\tname={item}\n\t\t\t\t\tselected={selected.has(item)}\n\t\t\t\t\thandleClick={() => handleClick(item)}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</ListGroup>\n\t);\n};\n\nexport default ListSelect;\n","import React from 'react';\nimport useComlink, { createComlink } from 'react-use-comlink';\nimport {\n\tJumbotron,\n\tButtonGroup,\n\tForm,\n\tFormGroup,\n\tContainer,\n\tInput,\n\tLabel,\n\tRow,\n\tCol,\n\tButton,\n\tSpinner\n} from 'reactstrap';\n\nimport { MaterialPicker } from '../../services/Calculator2';\n\nimport ListSelect from '../ListSelect';\n\nimport { SeedSolver as _SeedSolver } from '../../workers/seedCalculator';\nimport SeedSolverWorker from '../../workers/seedCalculator.worker';\n\nimport MaterialList from '../RecipesForSeed/MaterialList';\n\ninterface IRecipeIngredientsPickerProps {\n\tenoughLiquids: boolean;\n\tenoughAlchemy: boolean;\n\n\tselected: Set<string>;\n\tonUpdate: (selected: Set<string>) => void;\n\tonSelectAll: (part: string) => void;\n\tonDeselectAll: (part: string) => void;\n}\nconst RecipeIngredientsPicker = (props: IRecipeIngredientsPickerProps) => {\n\tconst {\n\t\tselected,\n\t\tonSelectAll,\n\t\tonDeselectAll,\n\t\tonUpdate,\n\t\tenoughLiquids,\n\t\tenoughAlchemy\n\t} = props;\n\tconst ColProps = {\n\t\txs: '12',\n\t\tsm: '6',\n\t\tml: '3'\n\t};\n\treturn (\n\t\t<Row>\n\t\t\t<Col {...ColProps}>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<p {...(!enoughAlchemy ? { className: 'text-danger' } : {})}>\n\t\t\t\t\t\t\tAt least one (1) of:\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => onSelectAll('ALCHEMY')}>\n\t\t\t\t\t\t\t\tSelect All\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => onDeselectAll('ALCHEMY')}>\n\t\t\t\t\t\t\t\tDeselect All\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<ListSelect\n\t\t\t\t\titems={MaterialPicker.ALCHEMY}\n\t\t\t\t\tselected={selected}\n\t\t\t\t\tonUpdate={selected => onUpdate(selected)}\n\t\t\t\t/>\n\t\t\t</Col>\n\t\t\t<Col {...ColProps}>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<p {...(!enoughLiquids ? { className: 'text-danger' } : {})}>\n\t\t\t\t\t\t\tAt least two (2) of:{' '}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => onSelectAll('LIQUIDS')}>\n\t\t\t\t\t\t\t\tSelect All\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button color=\"primary\" onClick={() => onDeselectAll('LIQUIDS')}>\n\t\t\t\t\t\t\t\tDeselect All\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<ListSelect\n\t\t\t\t\titems={MaterialPicker.LIQUIDS}\n\t\t\t\t\tselected={selected}\n\t\t\t\t\tonUpdate={selected => onUpdate(selected)}\n\t\t\t\t/>\n\t\t\t</Col>\n\t\t</Row>\n\t);\n};\n\nconst enoughLiquids = (selected: Set<string>) =>\n\tMaterialPicker.LIQUIDS.filter(value => selected.has(value)).length >= 2;\nconst enoughAlchemy = (selected: Set<string>) =>\n\tMaterialPicker.ALCHEMY.filter(value => selected.has(value)).length >= 1;\n\nconst useSeedSolver = createComlink<typeof _SeedSolver>(\n\t() => new SeedSolverWorker()\n);\n\nconst SeedFromRecipes = () => {\n\tconst [apIngredientsSelected, setApIngredientsSelected] = React.useState<\n\t\tSet<string>\n\t>(new Set());\n\tconst [lcIngredientsSelected, setLcIngredientsSelected] = React.useState<\n\t\tSet<string>\n\t>(new Set());\n\n\tconst SeedSolver = useSeedSolver();\n\n\tconst [seed, setSeed] = React.useState('');\n\tconst handleSeedChange = (e: any) => {\n\t\tsetSeed(e.target.value);\n\t};\n\n\tconst [solverInfo, setSolverInfo] = React.useState<any>({});\n\tconst getSeedSolver = async (): Promise<any> => {\n\t\tconst newSeedSolver = SeedSolver.proxy;\n\t\treturn await newSeedSolver;\n\t};\n\n\tconst update = async () => {\n\t\tconst solver = await getSeedSolver();\n\t\tif (!solver) return;\n\t\tconst info = await solver.getInfo();\n\t\tsetSolverInfo({ ...info });\n\t};\n\n\tReact.useEffect(() => {\n\t\tconst id = setInterval(() => update(), 250);\n\t}, []);\n\n\tReact.useEffect(\n\t\t() => {\n\t\t\tconst work = async () => {\n\t\t\t\tconst solver = await getSeedSolver();\n\n\t\t\t\tawait solver.update({\n\t\t\t\t\tapIngredients: Array.from(apIngredientsSelected),\n\t\t\t\t\tlcIngredients: Array.from(lcIngredientsSelected)\n\t\t\t\t});\n\t\t\t};\n\t\t\twork();\n\t\t},\n\t\t[apIngredientsSelected, lcIngredientsSelected]\n\t);\n\n\tReact.useEffect(\n\t\t() => {\n\t\t\tconst work = async () => {\n\t\t\t\tconst solver = await getSeedSolver();\n\t\t\t\tconst newSeed = parseInt(seed);\n\t\t\t\tif (isNaN(newSeed)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait solver.update({\n\t\t\t\t\tcurrentSeed: newSeed\n\t\t\t\t});\n\t\t\t};\n\n\t\t\twork();\n\t\t},\n\t\t[seed]\n\t);\n\n\tconst startCalculation = async () => {\n\t\tconst solver = await getSeedSolver();\n\t\tif (solver) {\n\t\t\tawait solver.start();\n\t\t}\n\t};\n\tconst stopCalculation = async () => {\n\t\tconst solver = await getSeedSolver();\n\t\tif (solver) {\n\t\t\tawait solver.stop();\n\t\t}\n\t};\n\n\tconst handleSelectAll = (update: any, set: Set<string>) => (type: string) => {\n\t\tlet newSet = new Set(...set);\n\t\tconst materials =\n\t\t\ttype === 'ALCHEMY' ? MaterialPicker.ALCHEMY : MaterialPicker.LIQUIDS;\n\t\tnewSet = new Set([...set, ...materials]);\n\t\tupdate(newSet);\n\t};\n\n\tconst handleDeselectAll = (update: any, set: Set<string>) => (\n\t\ttype: string\n\t) => {\n\t\tlet newSet = new Set(...set);\n\t\tconst materials =\n\t\t\ttype === 'ALCHEMY' ? MaterialPicker.ALCHEMY : MaterialPicker.LIQUIDS;\n\t\tnewSet = new Set([...set].filter(x => !materials.includes(x)));\n\t\tupdate(newSet);\n\t};\n\n\tconst hasEnoughLiquids =\n\t\tenoughLiquids(lcIngredientsSelected) &&\n\t\tenoughLiquids(apIngredientsSelected);\n\tconst hasEnoughAlchemy =\n\t\tenoughAlchemy(lcIngredientsSelected) &&\n\t\tenoughAlchemy(apIngredientsSelected);\n\tconst hasEnoughAll = hasEnoughLiquids && hasEnoughAlchemy;\n\treturn (\n\t\t<Container className=\"container shadow-sm\">\n\t\t\t<h4>Calculate a seed from the desired LC and AP ingredients</h4>\n\t\t\t<p>Lists can be left blank if any combination will do. </p>\n\t\t\t<p>\n\t\t\t\tThe resulting seed's LC and AP ingredients will be from the selected\n\t\t\t\tvalues.\n\t\t\t</p>\n\t\t\t<Row>\n\t\t\t\t<Container>\n\t\t\t\t\t<p>Lively Concoction:</p>\n\t\t\t\t\t<RecipeIngredientsPicker\n\t\t\t\t\t\tselected={lcIngredientsSelected}\n\t\t\t\t\t\tonUpdate={setLcIngredientsSelected}\n\t\t\t\t\t\tenoughLiquids={enoughLiquids(lcIngredientsSelected)}\n\t\t\t\t\t\tenoughAlchemy={enoughAlchemy(lcIngredientsSelected)}\n\t\t\t\t\t\tonSelectAll={handleSelectAll(\n\t\t\t\t\t\t\tsetLcIngredientsSelected,\n\t\t\t\t\t\t\tlcIngredientsSelected\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonDeselectAll={handleDeselectAll(\n\t\t\t\t\t\t\tsetLcIngredientsSelected,\n\t\t\t\t\t\t\tlcIngredientsSelected\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<p>Alchemic Precursor:</p>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<RecipeIngredientsPicker\n\t\t\t\t\t\tselected={apIngredientsSelected}\n\t\t\t\t\t\tonUpdate={setApIngredientsSelected}\n\t\t\t\t\t\tenoughLiquids={enoughLiquids(apIngredientsSelected)}\n\t\t\t\t\t\tenoughAlchemy={enoughAlchemy(apIngredientsSelected)}\n\t\t\t\t\t\tonSelectAll={handleSelectAll(\n\t\t\t\t\t\t\tsetApIngredientsSelected,\n\t\t\t\t\t\t\tapIngredientsSelected\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonDeselectAll={handleDeselectAll(\n\t\t\t\t\t\t\tsetApIngredientsSelected,\n\t\t\t\t\t\t\tapIngredientsSelected\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12} sm={6}>\n\t\t\t\t\t<Form className=\"seedForm\" onSubmit={e => e.preventDefault()}>\n\t\t\t\t\t\t<FormGroup className=\"formGroup\" row>\n\t\t\t\t\t\t\t<Label for=\"SeedFromRecipes.seed\">Start search from seed: </Label>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tid=\"SeedFromRecipes.seed\"\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tdisabled={solverInfo.running}\n\t\t\t\t\t\t\t\t\tvalue={seed}\n\t\t\t\t\t\t\t\t\tonChange={handleSeedChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t\t<Col />\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tdisabled={solverInfo.running || !hasEnoughAll}\n\t\t\t\t\t\t\tonClick={() => startCalculation()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tFind next\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tdisabled={!solverInfo.running}\n\t\t\t\t\t\t\tonClick={() => stopCalculation()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tStop\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t{solverInfo.running && (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Spinner type=\"grow\" color=\"info\" />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t)}\n\t\t\t{!solverInfo.running && (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\tCurrent seed : {solverInfo.currentSeed}\n\t\t\t\t\t\t{solverInfo.foundSeed && (\n\t\t\t\t\t\t\t<MaterialList LC={solverInfo.LC} AP={solverInfo.AP} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t)}\n\t\t</Container>\n\t);\n};\n\nexport default SeedFromRecipes;\n","import React from 'react';\nconst Donate = () => {\n\treturn (\n\t\t<form\n\t\t\taction=\"https://www.paypal.com/cgi-bin/webscr\"\n\t\t\tmethod=\"post\"\n\t\t\ttarget=\"_top\"\n\t\t>\n\t\t\t<input type=\"hidden\" name=\"cmd\" value=\"_donations\" />\n\t\t\t<input type=\"hidden\" name=\"business\" value=\"Y9VJB7NEAVEX2\" />\n\t\t\t<input type=\"hidden\" name=\"currency_code\" value=\"USD\" />\n\t\t\t<input\n\t\t\t\ttype=\"image\"\n\t\t\t\tsrc=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif\"\n\t\t\t\tname=\"submit\"\n\t\t\t\ttitle=\"PayPal - The safer, easier way to pay online!\"\n\t\t\t\talt=\"Donate with PayPal button\"\n\t\t\t/>\n\t\t\t<img\n\t\t\t\talt=\"\"\n\t\t\t\tsrc=\"https://www.paypal.com/en_US/i/scr/pixel.gif\"\n\t\t\t\twidth=\"1\"\n\t\t\t\theight=\"1\"\n\t\t\t/>\n\t\t</form>\n\t);\n};\n\nexport default Donate;\n","import React from 'react';\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\n\nimport RecipesForSeed from './RecipesForSeed/RecipesForSeed';\nimport SeedFromRecipes from './SeedFromRecipes/SeedFromRecipes';\nimport Donate from './Donate';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<Jumbotron>\n\t\t\t\t\t<h1 className=\"display-3 text-center\">Noita Helpers</h1>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<p className=\"lead text-center\">\n\t\t\t\t\t\tGet Lively Concoction and Alchemic Precursor recipes for your seed\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className=\"lead text-center\">\n\t\t\t\t\t\tGet a seed from desired Lively Concoction and Alchemic Precursor\n\t\t\t\t\t\tingredients\n\t\t\t\t\t</p>\n\t\t\t\t</Jumbotron>\n\t\t\t\t<Container className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n\t\t\t\t\t<RecipesForSeed />\n\t\t\t\t\t<SeedFromRecipes />\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t\t<footer className=\"footer font-small blue\">\n\t\t\t\t<div className=\"footer-copyright text-center py-2\">\n\t\t\t\t\tDonate to get this tool its own domain name!\n\t\t\t\t</div>\n\t\t\t\t<Donate />\n\t\t\t\t<div className=\"footer-copyright text-center py-2\">\n\t\t\t\t\t© 2020 Copyright: <a href=\"https://seva.dev/\">Seva Maltsev</a>\n\t\t\t\t</div>\n\t\t\t</footer>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}