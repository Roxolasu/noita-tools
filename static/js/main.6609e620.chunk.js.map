{"version":3,"sources":["services/Calculator2.ts","components/SeedForm.tsx","components/MaterialList.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["intMul","a","b","al","bl","intDiv","x","y","Error","num","Math","floor","ceil","toInt","i","max","min","toUInt","NollaPrng","seed","SEED_BASE","this","Next","BETA_SEED","MaterialPicker","prng","worldSeed","LIQUIDS","ALCHEMY","PRNG","Materials","PickMaterials","ShuffleList","source","count","counter","failed","rand","length","picked","includes","push","LC","AP","SeedForm","props","onSubmit","React","useState","setSeed","Form","className","e","preventDefault","FormGroup","row","Label","for","Col","Input","id","type","value","onChange","target","Button","color","ListGroup","map","l","ListGroupItem","key","App","data","setData","Jumbotron","Container","Row","xs","sm","PickForSeed","parseInt","MaterialList","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6609e620.chunk.js","sourcesContent":["// Taken from Bridge.NET:\n// https://github.com/bridgedotnet/Bridge/blob/8b1a4a0dee448319ac7bb0879d0019a26285e100/Bridge/Resources/Integer.js#L834\nconst intMul = (a: number, b: number) => {\n\tvar ah = (a >>> 16) & 0xffff,\n\t\tal = a & 0xffff,\n\t\tbh = (b >>> 16) & 0xffff,\n\t\tbl = b & 0xffff;\n\n\treturn (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\n};\n\n// https://github.com/bridgedotnet/Bridge/blob/8b1a4a0dee448319ac7bb0879d0019a26285e100/Bridge/Resources/Integer.js#L720-L738\nconst intTrunc = (num: number): number => {\n\treturn num > 0 ? Math.floor(num) : Math.ceil(num);\n};\nconst intDiv = (x: number, y: number): number => {\n\tif (y === 0) {\n\t\tthrow new Error('Dividing by Zero');\n\t}\n\n\treturn intTrunc(x / y);\n};\n\nconst toInt = (i: number) =>\n\tMath.max(2_147_483_648 * -1, Math.min(Math.floor(i), 2_147_483_647)) | 0;\nconst toUInt = (i: number) =>\n\tMath.max(0, Math.min(Math.floor(i), 4_294_967_295)) >>> 0;\n\nexport class NollaPrng {\n\tpublic static BETA_SEED: boolean = false;\n\tpublic SEED_BASE = 23456789 + 1 + 11 * 11;\n\tpublic seed: number; //double\n\n\tconstructor(seed: number /* int, double */) {\n\t\t// this.seed = seed;\n\t\tthis.seed = toUInt(seed);\n\t\tthis.Next();\n\t}\n\n\tpublic Next(): number {\n\t\t// this.seed =\n\t\t// toInt(this.seed) * 16807 + toInt(this.seed) / 127773 * -2_147_483_647;\n\t\tthis.seed =\n\t\t\t(intMul(toInt(this.seed), 16807) +\n\t\t\t\tintMul(intDiv(toInt(this.seed), 127773) | 0, -2147483647)) |\n\t\t\t0;\n\t\t// this.seed = Math.min(\n\t\t// \ttoInt(this.seed) * 16807 + toInt(this.seed) / 127773,\n\t\t// \t2_147_483_646\n\t\t// );\n\t\tif (this.seed < 0) {\n\t\t\tthis.seed += 2_147_483_647 | 0;\n\t\t}\n\t\treturn this.seed / 2_147_483_647;\n\t}\n}\n\nexport class MaterialPicker {\n\tLIQUIDS = [\n\t\t'water',\n\t\t'water_ice',\n\t\t'water_swamp',\n\t\t'oil',\n\t\t'alcohol',\n\t\t'swamp',\n\t\t'mud',\n\t\t'blood',\n\t\t'blood_fungi',\n\t\t'blood_worm',\n\t\t'radioactive_liquid', // aka \"toxic sludge\"\n\t\t'cement',\n\t\t'acid',\n\t\t'lava',\n\t\t'urine',\n\t\t'poison',\n\t\t'magic_liquid_teleportation',\n\t\t'magic_liquid_polymorph',\n\t\t'magic_liquid_random_polymorph',\n\t\t'magic_liquid_berserk',\n\t\t'magic_liquid_charm',\n\t\t'magic_liquid_invisibility'\n\t];\n\n\tALCHEMY = [\n\t\t'sand',\n\t\t'bone',\n\t\t'soil',\n\t\t'honey',\n\t\t'slime',\n\t\t'snow',\n\t\t'rotten_meat',\n\t\t'wax',\n\t\t'gold',\n\t\t'silver',\n\t\t'copper',\n\t\t'brass',\n\t\t'diamond',\n\t\t'coal',\n\t\t'gunpowder',\n\t\t'gunpowder_explosive',\n\t\t'grass',\n\t\t'fungi'\n\t];\n\n\tPRNG: NollaPrng;\n\tMaterials: string[] = [];\n\n\tconstructor(prng: NollaPrng, worldSeed: number /* uint */) {\n\t\tthis.PRNG = prng;\n\t\tthis.PickMaterials(this.LIQUIDS, 3);\n\t\tthis.PickMaterials(this.ALCHEMY, 1);\n\t\tthis.ShuffleList(worldSeed);\n\t\tthis.PRNG.Next();\n\t\tthis.PRNG.Next();\n\t}\n\n\tpublic PickMaterials(source: string[], count: number /* int */): void {\n\t\tlet counter = 0; // int\n\t\tlet failed = 0; // int\n\t\twhile (counter < count && failed < 99999) {\n\t\t\tconst rand = this.PRNG.Next() * source.length;\n\t\t\tconst i = toInt(rand);\n\t\t\tvar picked = source[i];\n\t\t\tif (!this.Materials.includes(picked)) {\n\t\t\t\tthis.Materials.push(picked);\n\t\t\t\tcounter++;\n\t\t\t} else {\n\t\t\t\tfailed++;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic ShuffleList(worldSeed: number /* uint */): void {\n\t\tvar prng = new NollaPrng((worldSeed >> 1) + 12534);\n\t\t// Toxic sludge, blood, and soil for first\n\t\tfor (let i = this.Materials.length - 1; i >= 0; i--) {\n\t\t\tlet rand = toInt(prng.Next() * (i + 1));\n\t\t\t[this.Materials[i], this.Materials[rand]] = [\n\t\t\t\tthis.Materials[rand],\n\t\t\t\tthis.Materials[i]\n\t\t\t];\n\t\t}\n\t}\n\n\tpublic static PickForSeed(worldSeed: number /* uint */) {\n\t\tvar prng = new NollaPrng(worldSeed * 0.17127 + 1323.5903);\n\t\t// Preheat random!\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tprng.Next();\n\t\t}\n\n\t\tconst LC = new MaterialPicker(prng, worldSeed);\n\t\tconst AP = new MaterialPicker(prng, worldSeed);\n\n\t\treturn {\n\t\t\tseed: worldSeed,\n\t\t\tLC: [LC.Materials[0], LC.Materials[1], LC.Materials[2]],\n\t\t\tAP: [AP.Materials[0], AP.Materials[1], AP.Materials[2]]\n\t\t};\n\t}\n}\n","import React from 'react';\nimport { Button, Input, Label, Form, FormGroup, Col } from 'reactstrap';\n\ninterface ISeedFormProps {\n\tonSubmit(seed: string): void;\n}\n\nconst SeedForm = (props: ISeedFormProps) => {\n\tconst { onSubmit } = props;\n\tconst [seed, setSeed] = React.useState('');\n\n\tconst handleNameChange = (e: any) => {\n\t\tsetSeed(e.target.value);\n\t};\n\n\tconst handleSubmit = (e: any) => {\n\t\te.preventDefault();\n\t\tonSubmit(seed);\n\t\tsetSeed('');\n\t};\n\n\treturn (\n\t\t<Form className=\"seedForm\" onSubmit={handleSubmit}>\n\t\t\t<FormGroup className=\"formGroup\" row>\n\t\t\t\t<Label className=\"label\" for=\"seed\">\n\t\t\t\t\tSeed\n\t\t\t\t</Label>\n\t\t\t\t<Col>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tid=\"seed\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tvalue={seed}\n\t\t\t\t\t\tonChange={handleNameChange}\n\t\t\t\t\t/>\n\t\t\t\t</Col>\n\t\t\t</FormGroup>\n\t\t\t<Button className=\"submitButton\" type=\"submit\" color=\"primary\">\n\t\t\t\tSubmit\n\t\t\t</Button>\n\t\t</Form>\n\t);\n};\n\nexport default SeedForm;\n","import React from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\n\ninterface ISeedFormProps {\n\tLC: string[];\n\tAP: string[];\n\tseed: string;\n}\n\nconst SeedForm = (props: ISeedFormProps) => {\n\tconst { LC, AP, seed } = props;\n\treturn (\n\t\t<div>\n\t\t\tseed: {seed}\n\t\t\t<div>\n\t\t\t\tLively Concoction:\n\t\t\t\t<ListGroup>\n\t\t\t\t\t{LC.map(l => <ListGroupItem key={l}>{l}</ListGroupItem>)}\n\t\t\t\t</ListGroup>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\tAlchemic Precursor:\n\t\t\t\t<ListGroup>\n\t\t\t\t\t{AP.map(l => <ListGroupItem key={l}>{l}</ListGroupItem>)}\n\t\t\t\t</ListGroup>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SeedForm;\n","import React from 'react';\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\n\nimport { MaterialPicker } from '../services/Calculator2';\n\nimport SeedForm from './SeedForm';\nimport MaterialList from './MaterialList';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n\tconst [data, setData] = React.useState();\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<Jumbotron>\n\t\t\t\t\t<h1 className=\"display-3 text-center\">Noita Helpers</h1>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<p className=\"lead text-center\">\n\t\t\t\t\t\tGet Lively Concoction and Alchemic Precursor recipes for your seed\n\t\t\t\t\t</p>\n\t\t\t\t</Jumbotron>\n\t\t\t\t<Container className=\"container\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col xs={12} sm={6}>\n\t\t\t\t\t\t\t<SeedForm\n\t\t\t\t\t\t\t\tonSubmit={seed =>\n\t\t\t\t\t\t\t\t\tsetData(MaterialPicker.PickForSeed(parseInt(seed, 10)))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col xs={12} sm={6}>\n\t\t\t\t\t\t\t{data && (\n\t\t\t\t\t\t\t\t<MaterialList seed={data.seed} LC={data.LC} AP={data.AP} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t\t<footer className=\"footer font-small blue\">\n\t\t\t\t<div className=\"footer-copyright text-center py-2\">\n\t\t\t\t\t© 2020 Copyright: <a href=\"https://seva.dev/\">Seva Maltsev</a>\n\t\t\t\t</div>\n\t\t\t</footer>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}